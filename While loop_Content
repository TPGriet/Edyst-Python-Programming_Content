1. Complete the given method solve that takes as parameter a positive integer n.

You have to print the largest power of 2 less than or equal to n.

For example, for 10 the largest power of 2 less than or equal to 10 is 8. For 64 largest power of 2 less than or equal to it is 64

Hint: instead of the default increment in your loops, can you think of a different operator?

TEST CASES:
-------------------
Example Input: 1
Output: 1
Example Input: 5
Output: 4
Example Input: 10000
Output: 8192

PROGRAM:
----------------------
def solve(n):
    # write your code here
    i=0
    while(2**i<=n):
        i=i+1
    print(2**(i-1)) 

2. Complete the given method solve that takes as parameter an integer and prints the number of digits in the integer.

TEST CASES:
------------------------
Example Input: 7897
Output: 4
Example Input: -956
Output: 3
Example Input: 0
Output: 1

PROGRAM:
-----------------------
def solve(num):
    # write your program from here
    num=abs(num) 
    if(num in (0,9)):
        print(1)
    else: 
        i=0
        while(num>0):
            num=num//10
            i=i+1
        print(i)    

3. A prime number is a number greater than 1 that has is divisible only by itself and 1.

Complete the given method solve that takes an integer n and prints Prime if it is a prime number and Not Prime if it is not a prime.

Hint: Think of all the conditions you should check. Can negative numbers be a prime? What about 1? What about even numbers?

TEST CASES:
-------------------
Example Input: 10
Output: Not Prime
Example Input: 5
Output: Prime
Example Input: -9
Output: Not Prime

PROGRAM:
----------------------
def solve(n):
    # write your code here
    p=True
    if n <= 1:
        p=False
    i = 2
    while i*i <= n:
        if n % i == 0:
            p= False
        i += 1
    if(p):
        print("Prime")
    else:
        print("Not Prime")

4. Write a method Met that takes as parameter an integer n.

You have to print the number of zeros at the end of the factorial of n.

For example, 3! = 6. The number of zeros are 0. 5! = 120. The number of zeros at the end are 1.

Hint: Think about which numbers multiplication leads to a 0 at the end

The Met method has to be inside a Solution class. Please check the code editor for the ideal method definition.

Note: n! < 10^5

TEST CASES:
----------------------
Example Input: 3
Output: 0
Example Input: 60
Output: 14
Example Input: 100
Output: 24
Example Input: 1024
Output: 253

PROGRAM:
----------------------
class Solution:
    def Met(self, n):
        # write your method here
        count = 0
        i = 5
        while (n / i >= 1):
            count += int(n / i)
            i *= 5
        print(count)
